{"ast":null,"code":"export const boardReducer = (boards, action) => {\n  switch (action.type) {\n    case 'CREATE_BOARD':\n      {\n        const board = {\n          id: Date.now() + '',\n          title: action.payload,\n          lists: [],\n          tasks: []\n        };\n        return [...boards, board];\n      }\n    case 'REMOVE_BOARD':\n      {\n        return boards.filter(item => item.id !== action.payload);\n      }\n    case 'ADD_LIST_ID_TO_A_BOARD':\n      {\n        return boards.map(item => {\n          if (item.id === action.payload.id) {\n            item.lists.push(action.payload.listId);\n          }\n          return item;\n        });\n      }\n    case 'ADD_TASK_ID_TO_A_BOARD':\n      {\n        return boards.map(item => {\n          if (item.id === action.payload.id) {\n            item.tasks.push(action.payload.taskId);\n          }\n          return item;\n        });\n      }\n    case 'UPDATE_BOARD':\n      {\n        return boards.map(item => {\n          if (item.id === action.payload.id) {\n            item.title = action.payload.title;\n          }\n          return item;\n        });\n      }\n    case 'REMOVE_LIST_ID_FROM_A_BOARD':\n      {\n        return boards.map(item => {\n          if (item.id === action.payload.id) {\n            item.lists = item.lists.filter(list => list !== action.payload.listId);\n          }\n          return item;\n        });\n      }\n    case 'REMOVE_TASK_ID_FROM_A_BOARD':\n      {\n        return boards.map(item => {\n          if (item.id === action.payload.id) {\n            item.tasks = item.tasks.filter(task => task !== action.payload.taskId);\n          }\n          return item;\n        });\n      }\n    default:\n      return boards;\n  }\n};","map":{"version":3,"names":["boardReducer","boards","action","type","board","id","Date","now","title","payload","lists","tasks","filter","item","map","push","listId","taskId","list","task"],"sources":["C:/Users/USER/Documents/GitHub/Trello-Clone/src/reducers/board.js"],"sourcesContent":["export const boardReducer = (boards,action) => {\r\n    switch (action.type) {\r\n        case 'CREATE_BOARD':{\r\n            const board ={\r\n                id: Date.now() + '',\r\n                title: action.payload,\r\n                lists:[],\r\n                tasks:[]\r\n            }\r\n            return [...boards,board]\r\n        }\r\n        case 'REMOVE_BOARD':{\r\n            return boards.filter(item => item.id !== action.payload)\r\n        }\r\n        case 'ADD_LIST_ID_TO_A_BOARD':{\r\n            return boards.map(item => {\r\n                if (item.id === action.payload.id) {\r\n                    item.lists.push(action.payload.listId)\r\n                }\r\n                return item\r\n            })\r\n\r\n        }\r\n        case 'ADD_TASK_ID_TO_A_BOARD':{\r\n            return boards.map(item => {\r\n                if (item.id === action.payload.id) {\r\n                    item.tasks.push(action.payload.taskId)\r\n                }\r\n                return item\r\n            })\r\n        }\r\n        case 'UPDATE_BOARD':{\r\n            return boards.map(item => {\r\n                if (item.id === action.payload.id) {\r\n                    item.title =action.payload.title\r\n                }\r\n                return item\r\n            })\r\n        }\r\n        case 'REMOVE_LIST_ID_FROM_A_BOARD':{\r\n            return boards.map(item => {\r\n                if (item.id === action.payload.id) {\r\n                    item.lists = item.lists.filter(list => list !== action.payload.listId)\r\n                }\r\n                return item\r\n            })\r\n        }\r\n        case 'REMOVE_TASK_ID_FROM_A_BOARD':{\r\n            return boards.map(item => {\r\n                if (item.id === action.payload.id) {\r\n                    item.tasks = item.tasks.filter(task => task !== action.payload.taskId)\r\n                }\r\n                return item\r\n            })\r\n        }\r\n          \r\n    \r\n        default:\r\n            return  boards;\r\n    }\r\n}"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAGA,CAACC,MAAM,EAACC,MAAM,KAAK;EAC3C,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,cAAc;MAAC;QAChB,MAAMC,KAAK,GAAE;UACTC,EAAE,EAAEC,IAAI,CAACC,GAAG,EAAE,GAAG,EAAE;UACnBC,KAAK,EAAEN,MAAM,CAACO,OAAO;UACrBC,KAAK,EAAC,EAAE;UACRC,KAAK,EAAC;QACV,CAAC;QACD,OAAO,CAAC,GAAGV,MAAM,EAACG,KAAK,CAAC;MAC5B;IACA,KAAK,cAAc;MAAC;QAChB,OAAOH,MAAM,CAACW,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACR,EAAE,KAAKH,MAAM,CAACO,OAAO,CAAC;MAC5D;IACA,KAAK,wBAAwB;MAAC;QAC1B,OAAOR,MAAM,CAACa,GAAG,CAACD,IAAI,IAAI;UACtB,IAAIA,IAAI,CAACR,EAAE,KAAKH,MAAM,CAACO,OAAO,CAACJ,EAAE,EAAE;YAC/BQ,IAAI,CAACH,KAAK,CAACK,IAAI,CAACb,MAAM,CAACO,OAAO,CAACO,MAAM,CAAC;UAC1C;UACA,OAAOH,IAAI;QACf,CAAC,CAAC;MAEN;IACA,KAAK,wBAAwB;MAAC;QAC1B,OAAOZ,MAAM,CAACa,GAAG,CAACD,IAAI,IAAI;UACtB,IAAIA,IAAI,CAACR,EAAE,KAAKH,MAAM,CAACO,OAAO,CAACJ,EAAE,EAAE;YAC/BQ,IAAI,CAACF,KAAK,CAACI,IAAI,CAACb,MAAM,CAACO,OAAO,CAACQ,MAAM,CAAC;UAC1C;UACA,OAAOJ,IAAI;QACf,CAAC,CAAC;MACN;IACA,KAAK,cAAc;MAAC;QAChB,OAAOZ,MAAM,CAACa,GAAG,CAACD,IAAI,IAAI;UACtB,IAAIA,IAAI,CAACR,EAAE,KAAKH,MAAM,CAACO,OAAO,CAACJ,EAAE,EAAE;YAC/BQ,IAAI,CAACL,KAAK,GAAEN,MAAM,CAACO,OAAO,CAACD,KAAK;UACpC;UACA,OAAOK,IAAI;QACf,CAAC,CAAC;MACN;IACA,KAAK,6BAA6B;MAAC;QAC/B,OAAOZ,MAAM,CAACa,GAAG,CAACD,IAAI,IAAI;UACtB,IAAIA,IAAI,CAACR,EAAE,KAAKH,MAAM,CAACO,OAAO,CAACJ,EAAE,EAAE;YAC/BQ,IAAI,CAACH,KAAK,GAAGG,IAAI,CAACH,KAAK,CAACE,MAAM,CAACM,IAAI,IAAIA,IAAI,KAAKhB,MAAM,CAACO,OAAO,CAACO,MAAM,CAAC;UAC1E;UACA,OAAOH,IAAI;QACf,CAAC,CAAC;MACN;IACA,KAAK,6BAA6B;MAAC;QAC/B,OAAOZ,MAAM,CAACa,GAAG,CAACD,IAAI,IAAI;UACtB,IAAIA,IAAI,CAACR,EAAE,KAAKH,MAAM,CAACO,OAAO,CAACJ,EAAE,EAAE;YAC/BQ,IAAI,CAACF,KAAK,GAAGE,IAAI,CAACF,KAAK,CAACC,MAAM,CAACO,IAAI,IAAIA,IAAI,KAAKjB,MAAM,CAACO,OAAO,CAACQ,MAAM,CAAC;UAC1E;UACA,OAAOJ,IAAI;QACf,CAAC,CAAC;MACN;IAGA;MACI,OAAQZ,MAAM;EAAC;AAE3B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}